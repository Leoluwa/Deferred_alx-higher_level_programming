The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------


Importing the function from the module:
	>>> add_integer = __import__('0-add_integer').add_integer

Checking for module docstring:
	>>> m_doc_s = __import__('0-add_integer').__doc__
	>>> len(m_doc_s) > 1
	True

Checking for function docstring:
	>>> f_doc_s = __import__('0-add_integer').add_integer.__doc__
	>>> len(f_doc_s) > 1
	True

Checking for regular addition:
	>>> add_integer(5, 9)
	14

Checking for positive with negative:
	>>> add_integer(7, -20)
	-13

Checking for nagetive with positive:
	>>> add_integer(-1, 9)
	8

Checking for addition over multiple values:
	>>> [add_integer(l, l**3) for l in range(11)]
	[0, 2, 10, 30, 68, 130, 222, 350, 520, 738, 1010]

Checking for float with int:
	>>> add_integer(6.5, 7)
	13

Checking for int with float:
	>>> add_integer(9, 3.9)
	12

Checking for float with float:
	>>> add_integer(7.4, 1.6)
	8

Checking for Nan:
	>>> add_integer(1, float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer

Checking for inf:
	>>> add_integer(1, float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer

Checking for very long integer value:
	>>> add_integer(1, 9999999999999999999999999999999999)
	10000000000000000000000000000000000

Checking non-number with number:
        >>> add_integer([1], 2)
        Traceback (most recent call last):
        	...
        TypeError: a must be an integer

Checking number with non-number:
        >>> add_integer(3, "2")
        Traceback (most recent call last):
        	...
        TypeError: b must be an integer

Checking non-number with non-number:
        >>> add_integer((2,), {"key": "value"})
        Traceback (most recent call last):
        	...
        TypeError: a must be an integer

Checking bool with number:
        >>> add_integer(True, 1)
        Traceback (most recent call last):
        	...
        TypeError: a must be an integer

Checking number with bool:
        >>> add_integer(0, False)
        Traceback (most recent call last):
        	...
        TypeError: b must be an integer

Checking no args:
        >>> add_integer()
        Traceback (most recent call last):
        	...
        TypeError: add_integer() missing 1 required positional argument: 'a'

Checking one arg:
        >>> add_integer(1)
	99

Checking more than 2 args:
        >>> add_integer(1, 2, 3)
        Traceback (most recent call last):
        	...
        TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given
